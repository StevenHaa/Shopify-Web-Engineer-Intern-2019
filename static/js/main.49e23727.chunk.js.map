{"version":3,"sources":["components/searchResult.js","components/favorites.js","App.js","serviceWorker.js","index.js"],"names":["SearchResult","handleAddToFavorites","item","_this","props","addFavorite","handleRemoveFromFavorites","removeFavorite","_this2","this","react_default","a","createElement","className","results","map","index","key","height","width","fill","favoritesTitles","includes","title","onClick","points","dangerouslySetInnerHTML","__html","description","Component","Favorites","favorites","length","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateInputValue","event","setState","defineProperty","target","name","value","handleClear","handleSubmit","e","preventDefault","handleSearch","state","inputValue","currentTitles","toConsumableArray","searchTitles","newSearchResults","data","forEach","keywords","push","decodedString","decode","body","newSearchObj","searchResults","concat","prevState","str","DOMParser","parseFromString","documentElement","textContent","currentFavoritesTitles","newFavorites","currentFavorites","splice","favorite","fetchData","fetch","then","res","json","_this3","onSubmit","type","placeholder","onChange","href","index_es","icon","faSearch","components_searchResult","components_favorites","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49e23727.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './searchResult.css'\r\n\r\nclass SearchResult extends Component {\r\n    // using this method to call the parent's addFavorites method\r\n    handleAddToFavorites = (item) => {\r\n        this.props.addFavorite(item);\r\n    }\r\n\r\n    // using this method to call the parent's removeFavorite method\r\n    handleRemoveFromFavorites = (item) => {\r\n        this.props.removeFavorite(item);\r\n    }\r\n\r\n    render() {\r\n        return (  \r\n            <div className='results'>\r\n                <table className='container'> \r\n                    {this.props.results.map((item, index) => (\r\n                        <tbody key={index}>\r\n                            <tr>\r\n                                <td>\r\n                                    {/* SVG to create a star */}\r\n                                    <svg height='20' width='20' className='starIcon' \r\n                                        fill={this.props.favoritesTitles.includes(item.title) ? 'green' : 'gray'} \r\n                                        onClick={!this.props.favoritesTitles.includes(item.title) ? () => this.handleAddToFavorites(item) : () => this.handleRemoveFromFavorites(item)}>\r\n                                        <polygon points='9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78'/>\r\n                                    </svg>\r\n                                 </td>\r\n                                <td className='title'> {item.title} </td>\r\n                                <td className='description' dangerouslySetInnerHTML={{__html: item.description}}></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    ))}\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResult;\r\n","import React, { Component } from 'react';\r\nimport './favorites.css'\r\n\r\nclass Favorites extends Component {\r\n     // using this method to call the parent's removeFavorite method\r\n     handleRemoveFromFavorites = (item) => {\r\n        this.props.removeFavorite(item);\r\n    }\r\n\r\n    render() {\r\n        // only render the area if there is at least 1 favorite\r\n        if(this.props.favorites.length > 0 ){\r\n            return ( \r\n                <div className='favorites'>\r\n                    <div className='favoritesTitle'>Favorites</div>\r\n                    <table className='container'> \r\n                        {this.props.favorites.map((item, index) => (\r\n                            <tbody key={index}>\r\n                                <tr>\r\n                                    <td>\r\n                                        <svg height='20' width='20' className='starIcon' fill='gray' onClick={() => this.handleRemoveFromFavorites(item)}>\r\n                                            <polygon points='9.9, 1.1, 3.3, 21.78, 19.8, 8.58, 0, 8.58, 16.5, 21.78'/>\r\n                                        </svg>\r\n                                     </td>\r\n                                    <td className='title'> {item.title} </td>\r\n                                    <td className='description' dangerouslySetInnerHTML={{__html: item.description}}></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        ))}\r\n                    </table>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (<div></div>)\r\n        }   \r\n    }\r\n}\r\n\r\nexport default Favorites;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchResult from './components/searchResult';\nimport Favorites from './components/favorites';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        inputValue: '',\n        data: [],\n        searchTitles: [],\n        searchResults: [],\n        favoritesTitles: [],\n        favorites: [],\n    };\n  }\n\n  // when the app mounts, fetch the data\n  componentDidMount() {\n      this.fetchData();\n  }\n\n  fetchData() {\n      fetch('https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000')\n      .then(res => res.json())\n      .then(data => { \n          this.setState({ data });\n      })\n  }\n\n  // set inputValue to the value entered in the input box\n  updateInputValue = (event) => {\n    this.setState({\n      [event.target.name]:  event.target.value,\n    });\n\n    // when the user clears the input field\n    if(event.target.value.length < 1){\n      this.handleClear();\n    }\n  }\n\n  // when user types and hits enter\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.handleSearch();\n  }\n\n  // when user types and clicks the search\n  handleSearch = () => {\n    // dont search if the input field is empty\n    if(this.state.inputValue.length < 1){\n      return;\n    }\n\n    let currentTitles = [...this.state.searchTitles];\n    let newSearchResults = [];\n\n    // search through the data\n    this.state.data.forEach((data) => {\n      // check if the input value is in the data's keywords or title\n      if(data.keywords.includes(this.state.inputValue) || data.title.includes(this.state.inputValue)){\n          currentTitles.push(data.title)\n\n          // has html entities, so we need to decode\n          let decodedString = this.decode(data.body);\n          \n          // create our new searched item obj\n          let newSearchObj = {\n            title: data.title,\n            description: decodedString,\n            title: data.title,\n          }\n\n          newSearchResults.push(newSearchObj)\n          \n          // the state now has the search results and categories found \n          this.setState({ \n            searchResults: [...newSearchResults],\n            searchTitles: [...currentTitles],\n          });\n      }\n    });\n  }\n\n  // clear search results\n  handleClear = () => {\n    // the search data is now empty\n    this.setState((prevState, props) => { \n      return (\n        {\n          searchResults: [],\n          searchTitles: [],\n        }\n      )\n    });\n  }\n\n  // unescape/decode html entities\n  decode = (str) => {\n    var doc = new DOMParser().parseFromString(str, 'text/html');\n    return doc.documentElement.textContent;\n  }\n\n  // adds the item into the favorites list\n  addFavorite = (item) => {\n    // get the list of the current favorite titles\n    let currentFavoritesTitles = [...this.state.favoritesTitles];\n    \n    // if the one clicked isnt in the favorites list, add it\n    if(!currentFavoritesTitles.includes(item.title)){\n      currentFavoritesTitles.push(item.title);\n      let newFavorites = [...this.state.favorites, item];\n      this.setState({\n        favoritesTitles: currentFavoritesTitles,\n        favorites: newFavorites,\n      })\n    }\n  }\n\n  // remove the item from the favorites list\n  removeFavorite = (item) => {\n    let currentFavoritesTitles = [...this.state.favoritesTitles];\n    let currentFavorites = [...this.state.favorites];\n\n    // remove the favorite title from the array \n    currentFavoritesTitles.forEach((title, index) => {\n      if(title === item.title){\n        currentFavoritesTitles.splice(index, 1);\n        return;\n      }\n    })\n\n    // remove the favorite item from the list\n    currentFavorites.forEach((favorite, index) => {\n      if(favorite.title === item.title){\n        currentFavorites.splice(index, 1);\n        return;\n      }\n    })\n\n    // update the state with the removed favorite item and title\n    this.setState({\n      favoritesTitles: currentFavoritesTitles,\n      favorites: currentFavorites,\n    })\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1 className='header'>Toronto Waste Lookup</h1>\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n            <input name='inputValue' type='text' placeholder='Search the waste wizard...'\n                value={this.state.inputValue} onChange={(e) => this.updateInputValue(e)}/>\n            <a href=\"#\"className='btn' onClick={this.handleSearch}\n            > <FontAwesomeIcon icon={faSearch} className='icon-flipped' /></a>\n        </form>\n\n        <SearchResult results={this.state.searchResults} favoritesTitles={this.state.favoritesTitles} \n          addFavorite={this.addFavorite} removeFavorite={this.removeFavorite}/>\n\n        <Favorites favorites={this.state.favorites} removeFavorite={this.removeFavorite}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}